//package com.example.fixbug.btc;
//
//import org.bitcoinj.core.*;
//import org.bitcoinj.kits.WalletAppKit;
//import org.bitcoinj.net.discovery.DnsDiscovery;
//import org.bitcoinj.params.MainNetParams;
//import org.bitcoinj.params.TestNet3Params;
//import org.bitcoinj.script.Script;
//import org.bitcoinj.store.BlockStore;
//import org.bitcoinj.store.MemoryBlockStore;
//import org.bitcoinj.wallet.DeterministicSeed;
//import org.bitcoinj.wallet.SendRequest;
//import org.bitcoinj.wallet.Wallet;
//import org.bitcoinj.wallet.listeners.WalletCoinsReceivedEventListener;
//
//import java.io.File;
//import java.io.IOException;
//import java.net.HttpURLConnection;
//import java.net.InetAddress;
//import java.net.URL;
//import java.net.UnknownHostException;
//import java.util.Arrays;
//import java.util.List;
//import java.util.Scanner;
//import java.util.concurrent.TimeUnit;
//
//public class BitcoinWalletCreator {
//
//    public void createBtc() {
//        NetworkParameters params = MainNetParams.get();
//        Context context = new Context(params);
//
//        // T·∫°o m·ªôt v√≠ m·ªõi
//        Wallet wallet = Wallet.createDeterministic(params, Script.ScriptType.P2WPKH);
//        Context.propagate(context); // ƒê·∫£m b·∫£o v√≠ s·ª≠ d·ª•ng context ƒë√∫ng
//
//        // L·∫•y 12 c·ª•m t·ª´ b√≠ m·∫≠t (Mnemonic phrase)
//        DeterministicSeed seed = wallet.getKeyChainSeed();
//        List<String> mnemonicCode = seed.getMnemonicCode();
//        System.out.println("12 c·ª•m t·ª´ b√≠ m·∫≠t c·ªßa v√≠: " + String.join(" ", mnemonicCode));
//        // L·∫•y ƒë·ªãa ch·ªâ Bitcoin
//        Address address = wallet.currentReceiveAddress();
////        Address address = wallet.freshReceiveAddress();  //ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n t·∫°o ƒë·ªãa ch·ªâ m·ªõi.
//
//        // In ƒë·ªãa ch·ªâ v√≠
//        System.out.println("ƒê·ªãa ch·ªâ v√≠ Bitcoin: " + address.toString());
//
//        // In private key (L∆ØU √ù: Kh√¥ng chia s·∫ª v·ªõi ai!)
//        System.out.println("Private Key: " + wallet.currentReceiveKey().getPrivateKeyAsWiF(params));
//
////        String apiUrl = "https://blockchain.info/rawaddr/" + address;
//        String apiUrl = "https://api.blockcypher.com/v1/btc/main/addrs/" + address.toString();
//
//        // ki·ªÉm tra ƒë·ªãa ch·ªâ v√≠ c√≥ ho·∫°t ƒë·ªông kh√¥ng
//        try {
//            URL url = new URL(apiUrl);
//            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//            conn.setRequestMethod("GET");
//            conn.setRequestProperty("Accept", "application/json");
//
//            if (conn.getResponseCode() != 200) {
//                System.out.println("L·ªói: Kh√¥ng th·ªÉ ki·ªÉm tra ƒë·ªãa ch·ªâ!");
//
//                // ƒê·ªçc n·ªôi dung l·ªói t·ª´ response
//                Scanner errorScanner = new Scanner(conn.getErrorStream());
//                StringBuilder errorResponse = new StringBuilder();
//                while (errorScanner.hasNext()) {
//                    errorResponse.append(errorScanner.nextLine()).append("\n");
//                }
//                errorScanner.close();
//
//                System.out.println("Chi ti·∫øt l·ªói: " + errorResponse.toString());
//                return;
//            }
//            Scanner scanner = new Scanner(url.openStream());
//            StringBuilder response = new StringBuilder();
//            while (scanner.hasNext()) {
//                response.append(scanner.nextLine());
//            }
//            scanner.close();
//
//            System.out.println("K·∫øt qu·∫£: " + response.toString());
//
////            giaoDichVi()
//
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//
//    public void transactionCoin(String mnemonic, String sToAddress) throws Exception {
//        NetworkParameters params = MainNetParams.get();
//        PeerGroup peerGroup = new PeerGroup(params);
//        peerGroup.addAddress(new PeerAddress(params, InetAddress.getByName("172.104.172.221"))); // Thay b·∫±ng node b·∫°n mu·ªën k·∫øt n·ªëi
//        peerGroup.start();
//
//        // üîπ 2. nh·∫≠p v√≠ t·ª´ 12 c·ª•m t·ª´ b√≠ m·∫≠t
//        DeterministicSeed seed = new DeterministicSeed(mnemonic, null, "", Utils.currentTimeSeconds());
//        Wallet wallet = Wallet.fromSeed(params, seed);
//
//        // üîπ 3. Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ v√≠ g·ª≠i
//        Address fromAddress = wallet.currentReceiveAddress();
//        System.out.println("V√≠ g·ª≠i: " + fromAddress.toString());
//
//        // 4Ô∏è‚É£ L·∫•y UTXO (Unspent Transaction Outputs) ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch
//        BlockStore blockStore = new MemoryBlockStore(params);
//        BlockChain chain = new BlockChain(params, wallet, blockStore);
//        peerGroup.addWallet(wallet);
//        peerGroup.downloadBlockChain();
//
//        // üîπ 6. Ki·ªÉm tra s·ªë d∆∞
//        Coin balance = wallet.getBalance();
//        System.out.println("S·ªë d∆∞ v√≠: " + balance.toFriendlyString());
//    }
//
//    public void transactionAddressCoin(String mnemonic, String sToAddress) {
//        try {
//            // üîπ 1. Kh·ªüi t·∫°o m·∫°ng Bitcoin
//            NetworkParameters params = MainNetParams.get();
//            Context context = new Context(params);
//
//            // üîπ 2. T·∫°o v√≠ t·ª´ 12 c·ª•m t·ª´ b√≠ m·∫≠t
//            DeterministicSeed seed = new DeterministicSeed(mnemonic, null, "", Utils.currentTimeSeconds());
//            Wallet wallet = Wallet.fromSeed(params, seed);
//
//            // üîπ 3. Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ v√≠ g·ª≠i
//            Address fromAddress = wallet.currentReceiveAddress();
//            System.out.println("üìå V√≠ g·ª≠i: " + fromAddress.toString());
//
//            // üîπ 4. ƒê·ªãa ch·ªâ nh·∫≠n BTC
//            Address toAddress = Address.fromString(params, sToAddress);
//            System.out.println("üìå V√≠ nh·∫≠n: " + toAddress.toString());
//
//            // üîπ 5. K·∫øt n·ªëi m·∫°ng Bitcoin (c√≥ th·ªÉ d√πng node c·ª• th·ªÉ thay v√¨ DNS Seed)
//            WalletAppKit kit = new WalletAppKit(params, new File("data/bitcoin-wallet"), "forwarding-service") {
//                @Override
//                protected void onSetupCompleted() {
//                    System.out.println("Wallet created and loaded successfully.");
//                    System.out.println("Receive address: " + wallet().currentReceiveAddress());
//                    System.out.println("Seed Phrase: " + wallet().getKeyChainSeed());
//                    System.out.println("Balance: " + wallet().getBalance().toFriendlyString());
//                    System.out.println("Public Key: " + wallet().findKeyFromAddress(wallet().currentReceiveAddress())
//                            .getPublicKeyAsHex());
//                    System.out.println("Private Key: " + wallet().findKeyFromAddress(wallet().currentReceiveAddress())
//                            .getPrivateKeyAsHex());
//                    wallet().encrypt("password");
//                }
//            };
////            kit.setBlockingStartup(false);
//            kit.setPeerNodes(
//                    new PeerAddress(params, InetAddress.getByName("84.247.180.248"))
//            );
////            kit.setDownloadListener(null); // Kh√¥ng c·∫ßn t·∫£i block headers
//            kit.startAsync();
//            kit.awaitRunning();  // ƒê·ª£i k·∫øt n·ªëi xong
//            kit.setAutoSave(true);
//
//            wallet = kit.wallet();
//
//            // üîπ 6. Ki·ªÉm tra s·ªë d∆∞ v√≠
//            Coin balance = wallet.getBalance();
//            System.out.println("üìå S·ªë d∆∞ v√≠: " + balance.toFriendlyString());
//
//            // üîπ 7. Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß kh√¥ng
//            Coin amountToSend = Coin.parseCoin("0.001"); // 0.001 BTC
//            Coin fee = Transaction.REFERENCE_DEFAULT_MIN_TX_FEE; // Ph√≠ giao d·ªãch t·ªëi thi·ªÉu
//            Coin totalAmount = amountToSend.add(fee);
//
////            if (balance.isLessThan(totalAmount)) {
////                System.out.println("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß! C·∫ßn √≠t nh·∫•t: " + totalAmount.toFriendlyString());
////                return;
////            }
//
//            // üîπ 8. T·∫°o giao d·ªãch
//            SendRequest sendRequest = SendRequest.to(toAddress, amountToSend);
//            sendRequest.feePerKb = fee;
//            wallet.completeTx(sendRequest);
//            wallet.signTransaction(sendRequest);
//
//            // üîπ 9. G·ª≠i giao d·ªãch l√™n m·∫°ng Bitcoin
//            wallet.commitTx(sendRequest.tx);
//            kit.peerGroup().broadcastTransaction(sendRequest.tx).broadcast().get();
//            System.out.println("‚úÖ Giao d·ªãch th√†nh c√¥ng! TXID: " + sendRequest.tx.getTxId());
//            System.exit(0);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            System.out.println("‚ùå L·ªói trong qu√° tr√¨nh giao d·ªãch!");
//            System.exit(0);
//        }
//    }
//    public void giaoDichVi2(String privateKeyWIF, String sToAddress) {
//        try {
//            // üîπ 1. Kh·ªüi t·∫°o m·∫°ng Bitcoin
//            NetworkParameters params = MainNetParams.get();
//            Context context = new Context(params);
//            WalletAppKit kits = new WalletAppKit(params, new File("/data/bitcoin-wallet"), "wallet");
//            kits.startAsync();
//            kits.awaitRunning();
//            Wallet wallets = kits.wallet();
//
//            // üîπ 2. Chuy·ªÉn ƒë·ªïi Private Key (WIF) th√†nh ECKey
//            DumpedPrivateKey dumpedPrivateKey = DumpedPrivateKey.fromBase58(params, privateKeyWIF);
//            ECKey key = dumpedPrivateKey.getKey();
//
//            // üîπ 3. T·∫°o v√≠ t·ª´ Private Key
//            Wallet wallet = Wallet.fromKeys(params, Arrays.asList(key));
//            Address fromAddress = LegacyAddress.fromKey(params, key);
//            System.out.println("üì§ V√≠ g·ª≠i: " + fromAddress.toString());
//
//            // üîπ 4. ƒê·ªãa ch·ªâ nh·∫≠n BTC
//            Address toAddress = Address.fromString(params, sToAddress);
//            System.out.println("üì• V√≠ nh·∫≠n: " + toAddress.toString());
//
//            System.out.println("Network: " + params.getId());
//
//            // üîπ 5. K·∫øt n·ªëi m·∫°ng Bitcoin
//            File file = new File("/data/bitcoin-wallet");
//            WalletAppKit kit = new WalletAppKit(params, file, "wallet");
//            kit.startAsync();
//            kit.awaitRunning();
//
//            // üîπ 6. Ki·ªÉm tra s·ªë d∆∞ v√≠
//            Coin balance = wallet.getBalance();
//            System.out.println("üí∞ S·ªë d∆∞ v√≠: " + balance.toFriendlyString());
//
//            // üîπ 7. Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß kh√¥ng (g·ª≠i 0.001 BTC)
//            Coin amountToSend = Coin.parseCoin("0.001"); // 0.001 BTC
//            Coin fee = Transaction.REFERENCE_DEFAULT_MIN_TX_FEE; // Ph√≠ t·ªëi thi·ªÉu
//            Coin totalAmount = amountToSend.add(fee);
//
//            if (balance.isLessThan(totalAmount)) {
//                System.out.println("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß! C·∫ßn √≠t nh·∫•t " + totalAmount.toFriendlyString());
//                return;
//            }
//
//            // üîπ 8. T·∫°o giao d·ªãch
//            SendRequest sendRequest = SendRequest.to(toAddress, amountToSend);
//            sendRequest.feePerKb = fee;
//            wallet.completeTx(sendRequest); // Ho√†n t·∫•t giao d·ªãch
//            wallet.signTransaction(sendRequest); // K√Ω giao d·ªãch v·ªõi Private Key
//
//            // üîπ 9. G·ª≠i giao d·ªãch l√™n m·∫°ng Bitcoin
//            wallet.commitTx(sendRequest.tx);
//            kit.peerGroup().broadcastTransaction(sendRequest.tx).broadcast().get();
//            System.out.println("‚úÖ Giao d·ªãch th√†nh c√¥ng! TXID: " + sendRequest.tx.getTxId());
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//
//    public void connect() {
//        // 1Ô∏è‚É£ Ch·ªçn m·∫°ng Bitcoin (MainNet cho m·∫°ng ch√≠nh, TestNet3 cho test)
//        NetworkParameters params = MainNetParams.get();
//
//        // 2Ô∏è‚É£ T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ d·ªØ li·ªáu blockchain v√† v√≠
//        File walletDir = new File("data/bitcoin-wallet");
//
//        // 3Ô∏è‚É£ Kh·ªüi t·∫°o WalletAppKit ƒë·ªÉ k·∫øt n·ªëi m·∫°ng Bitcoin
//        WalletAppKit kit = new WalletAppKit(params, walletDir, "mywallet") {
//            @Override
//            protected void onSetupCompleted() {
//                // 4Ô∏è‚É£ Khi v√≠ ƒë√£ s·∫µn s√†ng, l·∫•y ƒë·ªãa ch·ªâ nh·∫≠n Bitcoin
//                Wallet wallet = wallet();
//                Address address = wallet.currentReceiveAddress();
//                System.out.println("‚úÖ V√≠ Bitcoin ƒë√£ t·∫°o th√†nh c√¥ng!");
//                System.out.println("üì© ƒê·ªãa ch·ªâ v√≠ Bitcoin: " + address.toString());
//            }
//        };
//
//        // 5Ô∏è‚É£ K·∫øt n·ªëi v·ªõi m·∫°ng Bitcoin
//        kit.startAsync();
//        kit.awaitRunning();
//
//        // 6Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
//        PeerGroup peerGroup = kit.peerGroup();
//        System.out.println("üîó S·ªë l∆∞·ª£ng Peers k·∫øt n·ªëi: " + peerGroup.numConnectedPeers());
//
//        // 7Ô∏è‚É£ D·ª´ng k·∫øt n·ªëi khi xong (ch·ªâ l√†m n·∫øu c·∫ßn d·ª´ng)
//        // kit.stopAsync();
//    }
//}
