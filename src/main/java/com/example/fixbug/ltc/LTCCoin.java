package com.example.fixbug.ltc;

import com.google.gson.JsonObject;
import org.bitcoinj.core.*;
import org.bitcoinj.core.Address;
import org.bitcoinj.crypto.ChildNumber;
import org.bitcoinj.crypto.MnemonicCode;
import org.bitcoinj.crypto.MnemonicException;
import org.bitcoinj.script.Script;
import org.bitcoinj.store.BlockStore;
import org.bitcoinj.store.MemoryBlockStore;
import org.bitcoinj.wallet.DeterministicKeyChain;
import org.bitcoinj.wallet.DeterministicSeed;
import org.bitcoinj.wallet.UnreadableWalletException;
import org.bitcoinj.wallet.Wallet;

import java.security.SecureRandom;
import java.util.Collections;
import java.util.List;

public class LTCCoin {

    // L∆∞u √Ω: b·∫°n c·∫ßn c√≥ LitecoinParams ƒë√£ t√πy ch·ªânh n·∫øu ƒëang d√πng cho m·∫°ng Litecoin th·∫≠t s·ª±.
    // ·ªû ƒë√¢y d√πng t·∫°m MainNetParams v√¨ LitecoinMainNetParams c√≥ th·ªÉ l√† class t·ª± vi·∫øt (b·∫°n c·∫ßn ƒë·∫£m b·∫£o n√≥ k·∫ø th·ª´a t·ª´ NetworkParameters).
    private static final NetworkParameters params = LitecoinMainNetParams.get(); // ho·∫∑c MainNetParams.get()

//    public void send() {
//        OkHttpClient client = new OkHttpClient();
//
//        // Thay th·∫ø b·∫±ng API token c·ªßa b·∫°n
//        String yourToken = "YOUR_API_TOKEN";
//        // ƒê·ªãa ch·ªâ v√≠ g·ª≠i v√† nh·∫≠n
//        String fromAddress = "LTC_FROM_ADDRESS";
//        String toAddress = "LTC_TO_ADDRESS";
//        // Private key c·ªßa v√≠ g·ª≠i (WIF - Wallet Import Format)
//        String privateKeyWIF = "YOUR_PRIVATE_KEY_WIF";
//
//        // T·∫°o ƒë·ªëi t∆∞·ª£ng JSON cho y√™u c·∫ßu
//        JsonObject json = new JsonObject();
//        json.put("inputs", new org.json.JSONArray().put(new JSONObject().put("addresses", new org.json.JSONArray().put(fromAddress))));
//        json.put("outputs", new org.json.JSONArray().put(new JSONObject()
//                .put("addresses", new org.json.JSONArray().put(toAddress))
//                .put("value", 1000000) // 1 LTC = 100000000 litoshi
//        ));
//
//        // T·∫°o body cho y√™u c·∫ßu HTTP
//        RequestBody body = RequestBody.create(
//                json.toString(),
//                MediaType.parse("application/json")
//        );
//
//        // G·ª≠i y√™u c·∫ßu t·∫°o giao d·ªãch m·ªõi
//        Request request = new Request.Builder()
//                .url("https://api.blockcypher.com/v1/ltc/main/txs/new?token=" + yourToken)
//                .post(body)
//                .build();
//
//        Response response = client.newCall(request).execute();
//        String responseBody = response.body().string();
//
//        // In ra ph·∫£n h·ªìi t·ª´ API
//        System.out.println("Response: " + responseBody);
//
//        // Ti·∫øn h√†nh k√Ω giao d·ªãch v√† g·ª≠i ƒëi (b·∫°n c·∫ßn th√™m m√£ k√Ω v√† g·ª≠i giao d·ªãch ·ªü ƒë√¢y)
//    }

    public static void sendLTC() throws Exception {
        // Private Key WIF (ph·∫£i ƒë√∫ng Litecoin WIF b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ 'T')
        DumpedPrivateKey dumpedPrivateKey = DumpedPrivateKey.fromBase58(params, "T3yLWcFNQdrp2MpRpVUTHTKcbo6JcJmKgmLnNFWk3emikwpv6rk2");
        ECKey senderKey = dumpedPrivateKey.getKey();

        Wallet wallet = Wallet.createDeterministic(params, Script.ScriptType.P2PKH);
        wallet.importKey(senderKey);

        BlockStore blockStore = new MemoryBlockStore(params);
        BlockChain chain = new BlockChain(params, wallet, blockStore);

        PeerGroup peerGroup = new PeerGroup(params, chain);
        peerGroup.addWallet(wallet);
        peerGroup.start();
//        peerGroup.downloadBlockChain();

        // ƒê·ªãa ch·ªâ nh·∫≠n LTC (d√πng ƒë√∫ng ƒë·ªãa ch·ªâ m·∫°ng ch√≠nh, b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ L ho·∫∑c M)
        Address to = LegacyAddress.fromBase58(params, "LbwCEd3QNkmfMsZptdMQWsNhDpksccJohv"); // thay th·∫ø

        Coin amountToSend = Coin.valueOf(10000); // 0.0001 LTC
        Wallet.SendResult result = wallet.sendCoins(peerGroup, to, amountToSend);
        System.out.println("Transaction hash: " + result.tx.getTxId());

        peerGroup.stop();
    }

    public static void generateWallet2() throws UnreadableWalletException {
        DeterministicSeed seed = new DeterministicSeed("vapor uncle fruit affair ...", null, "", 0);
        DeterministicKeyChain chain = DeterministicKeyChain.builder().seed(seed).build();
        ECKey key = chain.getKeyByPath(Collections.singletonList(ChildNumber.ZERO_HARDENED), true);

        System.out.println("üîë Private key (WIF): " + key.getPrivateKeyEncoded(params));
        System.out.println("üè¶ LTC Address: " + key.getPrivateKeyEncoded(params).toString());
    }

    public static void generateWallet() throws MnemonicException.MnemonicLengthException {
        SecureRandom random = new SecureRandom();
        byte[] entropy = new byte[16];
        random.nextBytes(entropy);

        MnemonicCode mc = MnemonicCode.INSTANCE;
        List<String> mnemonic = mc.toMnemonic(entropy);

        String passphrase = "";
        long creationTime = System.currentTimeMillis() / 1000L;
        DeterministicSeed seed = new DeterministicSeed(mnemonic, null, passphrase, creationTime);

        Wallet wallet = Wallet.fromSeed(params, seed, Script.ScriptType.P2PKH);

//        ECKey key = wallet.currentReceiveKey();
        ECKey key = new ECKey(random);
        LegacyAddress address = LegacyAddress.fromKey(params, key);

        System.out.println("Mnemonic: " + String.join(" ", mnemonic));
        System.out.println("LTC Address: " + address);
        System.out.println("Private Key (WIF): " + key.getPrivateKeyEncoded(params).toString());
    }

    public static void litecoinWIFGeneratorFormPrivateKey() {
        // Thay th·∫ø b·∫±ng private key hex c·ªßa b·∫°n n·∫øu c√≥
        String hexPrivateKey = "f8a8e2ab2349ddcbba2736fa58c40f0e4d6f8c0bbf50fefb6a0d3f8a9d0e3c6e";
        ECKey key = ECKey.fromPrivate(Utils.HEX.decode(hexPrivateKey));

        NetworkParameters params = LitecoinMainNetParams.get();
        String wif = key.getPrivateKeyEncoded(params).toBase58();

        System.out.println("‚úÖ Private Key (hex): " + hexPrivateKey);
        System.out.println("üîê WIF (Litecoin): " + wif);
        System.out.println("üìÆ ƒê·ªãa ch·ªâ LTC: " + key.getPrivateKeyAsWiF(params));
    }
}
